<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thinking on Atsushi Mori&#39;s blog</title>
    <link>http://jp.atsushimori.com/tags/thinking/</link>
    <description>Recent content in Thinking on Atsushi Mori&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 03 Mar 2017 00:26:56 +0900</lastBuildDate>
    <atom:link href="http://jp.atsushimori.com/tags/thinking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>１番になるということ</title>
      <link>http://jp.atsushimori.com/no-one/</link>
      <pubDate>Fri, 03 Mar 2017 00:26:56 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/no-one/</guid>
      <description>

&lt;p&gt;ボクはしばらくの間、「ブランディング」というマーケティング手法について考えてきた。それは、デザインなのか、内側に宿る理念や思想なのか、はたまた、話題性なのか。&lt;/p&gt;

&lt;p&gt;結論から言おう。ブランディングのシンプルな方法は「１番になる」ということ。&lt;/p&gt;

&lt;p&gt;そう思った。&lt;/p&gt;

&lt;p&gt;「ブランド」というのは人によって相対的なコトバなので、ここでの結論は、マーケティングを最大化するという目的を持っている場合という条件をつけておこう。&lt;/p&gt;

&lt;p&gt;マーケティングとは、「継続的に売上を上げるための施策」と訳すのが一般的であるとすると、売上を継続的に上げるためにブランドを作りたいという場合に、「&lt;strong&gt;１番になればよい&lt;/strong&gt;」ということになる。&lt;/p&gt;

&lt;p&gt;そんなのなれるのならあたりまえだと思うかもしれないが、これはシンプル且つ、確かな方法であることを再認識して頂きたいので、改まって言いたい。&lt;/p&gt;

&lt;h2 id=&#34;デザインを着飾るマーケティングはうまくいかない&#34;&gt;デザインを着飾るマーケティングはうまくいかない&lt;/h2&gt;

&lt;p&gt;ブランディングというと、CI（コーポレート・アイデンティティ）たとえば、ロゴや理念などコアな思想を形状化したり、経営方針を整理してまとめたりといったところに注力されることが多い。&lt;/p&gt;

&lt;p&gt;ボクはそれが間違っていると思っている。結果として必要だったのかもしれないが、プロセスとして決して有効な手段ではないと言い切りたい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;大事なのは形ではなく、意思である&lt;/strong&gt;。その意志はどこからくるかといえば、思想、あるいは勝手に抱いた使命感からである。&lt;/p&gt;

&lt;p&gt;つまり、「もうどうしようもなく、やらずにはいられない」という行動に紐付いた活動は長期的にマーケティングに成功するだろうし、結果的に置かれた状況に対して、ゴーイングコンサーンにもとづいて「やろう」と決意したものでは同じように見えてまったく違うのである。&lt;/p&gt;

&lt;p&gt;それがきれいなコトバにすれば「ビジョン」とか「経営理念」ということになるのだろう。ただ、多くのブランディングを語っている人たちは本当の意味でこの真実にはたどり着いていないのではないかと思っている。&lt;/p&gt;

&lt;h2 id=&#34;誰でも一番になれる&#34;&gt;誰でも一番になれる&lt;/h2&gt;

&lt;p&gt;いままでの経験上、「着飾りのブランド」はほとんど意味をなさないことがわかり、再現性高くブランディングというものを成功させるには一体何が必要なのか、考えた結果が、冒頭に述べた「１番になる」ということだ。&lt;/p&gt;

&lt;p&gt;もっといえば、自分が一番を目指す場所を選択し、且つ、そこに市場がある、または、市場がつくれる、という条件でブランディングはうまくいく。&lt;/p&gt;

&lt;p&gt;大企業のブランディングだと、広告などの力技の影響があり、思考が複雑になるため、例として個人ブログをあげてみよう。&lt;/p&gt;

&lt;p&gt;「ブロガー」という市場は競合がかなり多い。でもうまく広告で暮らしていける「プロブロガー」みたいな人はいつだって一定数いる。一体何が違うのか。&lt;/p&gt;

&lt;p&gt;継続力も含め、一番になれたことが勝因ではないだろうか。&lt;/p&gt;

&lt;p&gt;もちろんアフィリエイターの場合、「採用系」という枠でわかりやすく一番になった人もいるだろうがあ、みんながみんなそうではないことは事実だ。&lt;/p&gt;

&lt;p&gt;そうではない人は、自分で一番になれる場所を作っているのである。&lt;/p&gt;

&lt;p&gt;その最たるものは「個人」を売ることで、これはだれにも真似できない。お金をかけても真似ができない。だから、1/1で１番になっているということだ。&lt;/p&gt;

&lt;p&gt;だから、だれでも一番になれるのだ。&lt;/p&gt;

&lt;p&gt;ただ、それだって簡単ではない。一人で運営するのであれば、究極的に客観視ができなければ、他の多くと同じように自分をまとめてしまうからだ。&lt;/p&gt;

&lt;p&gt;だって、人間には手足があったり、頭があったり、歩けたり、服を着たり・・共通点が実に多くある。顔の形だって世の中には似ている人が結構な数いることだろう。&lt;/p&gt;

&lt;p&gt;では、どうやって「個」を特定するのか。&lt;/p&gt;

&lt;p&gt;それは、掛け合わせしかない。&lt;/p&gt;

&lt;p&gt;興味を持っていること、言い回し、考え方、野望、得意なこと、それらをかけ合わせていくことで、だんだんと競合が少なくなっていく。あとは、そこに市場があるかだけを考えれば良い。&lt;/p&gt;

&lt;p&gt;大体の場合、&lt;strong&gt;自分の中の１番を人は選ぶ&lt;/strong&gt;。だから、多くの人の１番になるべきだというのが持論である。&lt;/p&gt;

&lt;p&gt;なんでこんな簡単なことに気づかなかったのか。&lt;/p&gt;

&lt;h2 id=&#34;想いをカタチにみたいなのは不十分&#34;&gt;想いをカタチにみたいなのは不十分&lt;/h2&gt;

&lt;p&gt;ブランディングをサービスとして提供する人はしばしば、「想いをカタチにしないと伝わりませんよ」という。それは決して間違いでない。ただ、勘違いしていることが多いのは、「クライアントの想いをきれいで伝わりやすいアウトプットで表現する」ということをゴールに掲げていることだ。&lt;/p&gt;

&lt;p&gt;これではプロデューサーにはなれないし、ふわっとした結果しか生まれない。&lt;/p&gt;

&lt;p&gt;たとえば、「人の役に立ちたい」という人が何人いるだろうか。星の数ほどいるそうした理念をカタチにしたところで、よほどの大きな影響力がない限り、意味は伝わらない。&lt;/p&gt;

&lt;p&gt;補足だが、同じ言葉でも発せられる状況によって、伝わる場合もある。たとえば、ギャップがある場合などだ。ただ、ギャップを感じているということはすでに一定の認知を得ているということなので、そうしたケースは除外する。&lt;/p&gt;

&lt;p&gt;本当にまだ認知されていない人や企業が「人の役に立ちたい」といったところで、一番にはなれない。
もちろん、理念がすべてではないが、大事だ。&lt;/p&gt;

&lt;p&gt;もし、プロデューサーとしてプロジェクトに参加するのであれば、本当に必要なカタチに落とし込めるまで、徹底的にヒアリングし、世界レベルの視野をもってアウトプットを考えるべきだ。&lt;/p&gt;

&lt;p&gt;これは、ブランディングを提供する者をディスりたいわけではなく、自分へのメッセージです。&lt;/p&gt;

&lt;p&gt;いかに価値のないマーケティングをしてしまっていたか、今更気づいたのである。&lt;/p&gt;

&lt;p&gt;それなりに売上が上がったり、役に立ったというフィードバックをクライアントから受けることはあれど、どうしても自分の中で腑に落ちないところがあったが、すっきりした。&lt;/p&gt;

&lt;p&gt;一番になれば、マーケティングは成功する。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ウェブのちょっと先の未来予想図</title>
      <link>http://jp.atsushimori.com/the-future-of-web/</link>
      <pubDate>Sun, 19 Feb 2017 15:14:50 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/the-future-of-web/</guid>
      <description>

&lt;p&gt;最近、NodeをベースにKoaとかElectronとかReactとかを使ってみていたら、将来のWebはこうなるんじゃないかというのがいくつかでてきたのでまとめます。&lt;/p&gt;

&lt;h2 id=&#34;リアルタイムが当たり前に&#34;&gt;リアルタイムが当たり前に&lt;/h2&gt;

&lt;p&gt;Socket.ioとかRethinkDBとか、そのあたりの技術のコモディティ化を考えると、これから先、わりと気軽に「リアルタイムでやろう」という決断ができると思う。&lt;/p&gt;

&lt;p&gt;もちろん、大きなサービスではそれなりに分散とかアーキテクチャーを固めないと運用できないとは思うけれど、10万人程度のユーザーで運用をイメージしたアプリケーションだったら全然いけるハズ。&lt;/p&gt;

&lt;p&gt;リアルタイムになると、どうなるか？&lt;/p&gt;

&lt;p&gt;もっとWebがリアルとの境界線を超えてくるだろう。LINEとかもそうだけど、日常の中に溶け込んでいる。それがウェブサイトでも起こると考えて不思議はない。結局、人は人を感じたいがために生きていて、やっぱり人を感じることは本質的に魅力なのだろう。だから、よくマーケティングの人とかいうのは「Webは24時間働く営業マン」なんて表現をしていた流れとは逆境する流れになるんじゃないかと個人的には考えている。&lt;/p&gt;

&lt;p&gt;もちろん、勝手に24時間ホスティングされているのはされているのに変わりはない。何が言いたいかといえば、逆にリアルタイムになることで、そこには&lt;strong&gt;&lt;em&gt;人に合わせてWebが存在する&lt;/em&gt;&lt;/strong&gt;という在り方が普及するのではないか。ということだ。&lt;/p&gt;

&lt;h2 id=&#34;ルーティングがシームレスになる&#34;&gt;ルーティングがシームレスになる&lt;/h2&gt;

&lt;p&gt;SPA（Single Page Application）という言葉がエンジニアの間では割りと一般的に使われているけれど、これは、単純にDOMを書き換えてビューを操作するということではなく、ルーティングの在り方が変わる可能性を示唆しているといえるのではないだろうか。&lt;/p&gt;

&lt;p&gt;今までのルーティングというのはHttpリクエストに応じてハンドリングしている。しかし、基本的にSPAになるということも考えられないだろうか。もちろん、DOMのレンダリング量によっては死活問題になるなんて見解もあるので、一概には言えないけれど、ルーティングってそもそもなんだっけ？と考えてみると、その表示されているページの固有なIDのようなものである。また、それが正しく検索エンジンに認識してくれるかが大きな問題になることが多い。だから、業務システムとかではSPAいいよねってなるけど、いまいち普及しないのは、ここらへんのインデックスコントロールがうまくできる確証がないからではないか。&lt;/p&gt;

&lt;p&gt;とはいえ、AWWWARDS（awwwards.com）とかでウェブの世界の先端を覗いてみると、Ajaxを使ったサイトが結構でてきていて、シームレスにページ間を移動するというのがこの先トレンドになることが予測できる。&lt;/p&gt;

&lt;p&gt;そうした動向をみても、ルーティングはHistry APIなどでコントロールし、ビューはReactで一躍注目のShadowDOMとかでコントロールするという流れができてきてもおかしくない。&lt;/p&gt;

&lt;h2 id=&#34;デバイスやアプリケーションなどもシームレスになる&#34;&gt;デバイスやアプリケーションなどもシームレスになる&lt;/h2&gt;

&lt;p&gt;デバイスのシームレス第一弾はレスポンシブデザインだろう。ただ、レスポンシブもブレイクポイントに基づいた固定されたインターフェイスの形であって、将来的にはもっと柔軟なフレームワークに変化していくと思っている。ルーティングがシームレス化し、リアルタイムでユーザーの動きとリンクし、ネイティブアプリのように扱われるようになることで、今までとは全く違うUXが必要になる。&lt;/p&gt;

&lt;p&gt;もっとパーソナライズ、ローカライズされた表示にまでシームレス化するだろう。ただ、それが起こるのはGoogleがそうした仕組みを正しく評価しますよ、こうして記述してくれれば検索エンジンに伝わりますよってアナウンスがあってからだと思う。&lt;/p&gt;

&lt;p&gt;とはいえ、GooogleだってUXを重視したエンジンの進化は歓迎だと思うので、ゆくゆくはそうなると考えている。&lt;/p&gt;

&lt;h2 id=&#34;原点回帰&#34;&gt;原点回帰&lt;/h2&gt;

&lt;p&gt;結局は原点に立ち戻る。それは本質ということだから、あたりまえ。ウェブもそうなるのではないだろうか。あれもこれも実現するためにモリモリに実装されたモジュール群や、「もし、こうなったときのために」と汎用性をもたせすぎたライブラリ群、用語に偏ったWeb業界のカルチャー、いろんなものが原点に戻った時に、ものすごくシンプルにとらえることができるのだと思う。そうした時代がいつかくるのだろうか。&lt;/p&gt;

&lt;p&gt;ただ、言えるのは人工知能とかいろいろ進んでくると、「やっぱり人間の範囲でやれることをやるのが幸せだね」ってことに気づいて、取捨選択されていくことは予測できる。&lt;/p&gt;

&lt;p&gt;とまぁ、妄想気味にウェブの未来を考えてみたけど、改めて思うのは最近の技術進化は本当にワクワクすることが多い。今は技術のかけらだけど、組み合わせると一歩先の未来が見えてくるから、そういうことを考えていると楽しい。プログラミングの魅力のひとつだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>もう少しで完成</title>
      <link>http://jp.atsushimori.com/timing/</link>
      <pubDate>Tue, 27 Dec 2016 23:36:27 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/timing/</guid>
      <description>

&lt;p&gt;もう少しでGeneのβが完成する。なんとか年内にリリースしたい。&lt;/p&gt;

&lt;p&gt;今まで、受託を一生懸命やっていたせいか、今回一応オリジナルプロダクトをつくると何人かに話したらとても興味を持ってくれていてすごく新鮮な気持ちだ。&lt;/p&gt;

&lt;p&gt;そうだよね、考えてみれば、どこそこのウェブサイトを作ったっていっても実力を測る材料にしかならないもんね。気づかなかったけど、何か製品をつくるってすごくいい。クライアントワークとは違う期待をいただき、それがとてもポジティブな期待で心地よい。&lt;/p&gt;

&lt;p&gt;あとは、意外と使いたいって言ってくださる方もいて、「ボクが利用者一番になりますよ」なんてうれしいこと言ってくれた人もいた。&lt;/p&gt;

&lt;p&gt;やる気です。&lt;/p&gt;

&lt;p&gt;さて、Geneの方ですが、いよいよテンプレートを用意する段階になって、概ねGUI上の仕組みは完成しました。あとはプレビュー用にローカルサーバーを立てる関数を作ったり、すれば、出来上がる。&lt;/p&gt;

&lt;p&gt;協力してくれている人からは「いつもみたいにこだわるから今回ははやく出しましょう」ってリーンスタートアップ的なノリで言ってくるんですけど、ある程度のクオリティを下回るようならたとえβ版だとしてもリリースはしたくないと思っていて、それで想定より半月ほど遅くなってしまったんですね。&lt;/p&gt;

&lt;p&gt;リーンスタートアップって、スタートアップ、つまり新しい技術や革新的なことについての開発サイクルの話であるというのがボクの持論で、今回わりとありふれたサイト生成ツールを作っているので、使った時点で直感的に良さ（こだわったディテールの部分が機能している箇所）を実感してもらわないと、多分使い続ける理由が残らないんだと思うんですよね。&lt;/p&gt;

&lt;p&gt;で、今回狙っている感動ポイントはこんな感じです。&lt;/p&gt;

&lt;h2 id=&#34;公開までの速さ&#34;&gt;公開までの速さ&lt;/h2&gt;

&lt;p&gt;公開まではサイト名やリモートホストの必要項目を10あまり入れ、ボタンを押せばその時点で公開できます。情報が揃っていれば、新しいサイトが1分足らずで作れます。記事を一つ書く時間を考慮すると2-30分でわりといい感じのサイトが立ち上がります。&lt;/p&gt;

&lt;p&gt;これは、データベースを使わない選択をしたことが大きく影響しています。&lt;/p&gt;

&lt;h2 id=&#34;記事を書いている途中でおちるストレスがない&#34;&gt;記事を書いている途中でおちるストレスがない&lt;/h2&gt;

&lt;p&gt;ネット上のツールではないので、落ちることはほとんどないと思います。100%ではないですが、ブラウザほどエラーは発生しないでしょう。&lt;/p&gt;

&lt;p&gt;これはローカルアプリということが利点になるところです。&lt;/p&gt;

&lt;h2 id=&#34;デザイン性&#34;&gt;デザイン性&lt;/h2&gt;

&lt;p&gt;デザインレベルが高い（と思う）正直Wordpressでこれはいい、そのままプロダクトレベルで使える！と感動したテンプレートはありません。海外のテンプレートはデザイン性が高いのですが、日本語に対応させるとCSSをいじったりしないといけません。&lt;/p&gt;

&lt;p&gt;とにかくそのまま使えるレベルの高いテンプレートを提供して、シェアを広げたい。ここらへんはマーケティング戦略でもあるかなといったところです。&lt;/p&gt;

&lt;h2 id=&#34;ノーコード&#34;&gt;ノーコード&lt;/h2&gt;

&lt;p&gt;Geneはすべてがシンプルにできています。拡張性よりも必要性が大事だと思っているので、（というか拡張性を使いこなせる人はそこまで多くないので必要ない）必要最低限の機能に絞ってしまうことで、究極のシンプルを目指します。&lt;/p&gt;

&lt;p&gt;以上、現場からお届けしました。
コーディングに戻ります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gene</title>
      <link>http://jp.atsushimori.com/gene-is-awsome/</link>
      <pubDate>Wed, 21 Dec 2016 00:40:25 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/gene-is-awsome/</guid>
      <description>

&lt;p&gt;今日もコーディングを続けている。知らないコードを学んでいく工程をはさみながらなので思うようには進みません。ただ、完成は間近です。&lt;/p&gt;

&lt;p&gt;コードネームははGene（ジーン）。英語で「遺伝子」という意味です。サイトマネージャーわかりやすく言えばウェブサイトの作成／管理ツール。ボクは本気でこの製品が数千万人、数億人の手にわたることを想像している。今日のウェブサイト制作や管理には無駄が多い。パフォーマンスだって最高レベルではない。Geneをシンプルにとらえることで、本来欲していた要件が非常にシンプルだったことに気づくだろう。&lt;/p&gt;

&lt;p&gt;いつだって最高の製品には最高のプロデューサーが必要だ。リリースしてみないと断言はできないが、ボクの考えていることがより真理に近いということを、Geneを通じて証明したい。&lt;/p&gt;

&lt;p&gt;なお、β版であるファーストリリースのバージョンはElectronをつかったmacアプリを想定している。もちろん、その先にはいろいろな構想があるのだけれど、一気にはできないので、機能とプラットフォームを限定した形でのリリースを予定しています。&lt;/p&gt;

&lt;p&gt;リリースの前に、なぜGeneの開発を進めることにしたのかを説明しておきたい。&lt;/p&gt;

&lt;p&gt;ターゲットとなるのはWordpressなどのオープンソースCMSを使用しているユーザーになるだろう。ボクも5年くらいWordpressは使っていた。便利だし、CMS利用の選択肢としては革新的なものだった。ただ、完璧に腑に落ちたことは一度もなかった。だからパーフェクトな製品をつくりたいと思ったんです。&lt;/p&gt;

&lt;p&gt;具体的には以下のようなことを改善しようと思っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パフォーマンスの向上&lt;/li&gt;
&lt;li&gt;ライティングが身近になるような仕組みづくり&lt;/li&gt;
&lt;li&gt;AMP対応&lt;/li&gt;
&lt;li&gt;検索エンジン対策の平均レベルをあげる仕組みづくり&lt;/li&gt;
&lt;li&gt;セキュリティ問題（PCローカルをフル活用する）&lt;/li&gt;
&lt;li&gt;CPUを用いた人工知能の活用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど、ファーストリリースでは機能をどこまで制限するかは未定だが、まずはサイトジェネレーターとして、サイトマネージャーとしての機能が備わっていれば良いと考えている。&lt;/p&gt;

&lt;p&gt;macOSアプリをリリースしたら、iOS版を進めたい。静的にサイトを書き出す仕組みだが静的サイトジェネレーターのiOSアプリはなさそうだ。必要だと思う。&lt;/p&gt;

&lt;p&gt;それぞれについて少し。&lt;/p&gt;

&lt;h2 id=&#34;パフォーマンスの向上&#34;&gt;パフォーマンスの向上&lt;/h2&gt;

&lt;p&gt;WordpressはTTFB(Time to First Byte)がどうしても改善が難しい。それはコアファイルの実行に時間がかかってしまうからどうしようもない。CDNなどを使用したり、AMPを導入したりして表示速度は申し分ないほどに改善ができるが、中途半端な知識でキャッシュを扱うとある環境では画像が表示されなかったり、CSSのスタイルが崩れたりする。そもそもそうしたバグを生まないような仕組みが必要です。&lt;/p&gt;

&lt;h2 id=&#34;ライティングが身近になるような仕組みづくり&#34;&gt;ライティングが身近になるような仕組みづくり&lt;/h2&gt;

&lt;p&gt;多くのCMSはブラウザ上にGUIを備えている。アカウントだって必要だ。Geneはローカルアプリなので、PCを開いてアプリを起動すればいつでも書き始められる。インターネット通信の切断があって、1時間かけて途中まで書きかけた記事がパーになることもなくなる。また、シンプルでいけてるUIが日常に溶け込んでいくことを願っている。&lt;/p&gt;

&lt;h2 id=&#34;amp対応&#34;&gt;AMP対応&lt;/h2&gt;

&lt;p&gt;AMPはGoogleのサーバーに画像などをキャッシュさせられる仕組みで、準拠したHTMLの記述をすれば、たしかなパフォーマンスを約束してくれる。検索順位的にもモバイルページでは優位になっている例が確認できている。これを使うかどうかを簡単に選べるようにする。ページ毎にワンクリックで導入できれば、とても便利だともう。Wordpressのように別URLの管理など必要ない。（UI、設計にこだわるなら使えないかもしれないが、AMPに頼らなくてもう十分なパフォーマンスを実現できる予定）&lt;/p&gt;

&lt;h2 id=&#34;検索エンジン対策の平均レベルを上げる仕組みづくり&#34;&gt;検索エンジン対策の平均レベルを上げる仕組みづくり&lt;/h2&gt;

&lt;p&gt;とくにHTMLのhead情報に関してはパターンが決まっているのに、個々にカスタマイズをさせると品質にばらつきがでてしまう。Geneもテーマの適用という概念をとりいれる予定だが、head情報はテーマ制作者には変更できないようにする予定だ。そもそも毎回記述するの必要がないし、OGPの設定やcanonicalの設定なんて自動化すべきことだからです。もちろん検索エンジンの対策については多岐にわたるという反論もあるとおもうので、一部の対策という理解でいてもらいたい。&lt;/p&gt;

&lt;h2 id=&#34;セキュリティ問題&#34;&gt;セキュリティ問題&lt;/h2&gt;

&lt;p&gt;Wordpressの課題としていつもくっついてくるのがセキュリティ問題である。なぜみんなブラウザGUIを使うのだろうか。アプリケーションにすればセキュリティ問題は最小限にとどめることができる。これもシンプルに考えた末の真実だと思っている。&lt;/p&gt;

&lt;h2 id=&#34;cpuを用いた人工知能の活用&#34;&gt;CPUを用いた人工知能の活用&lt;/h2&gt;

&lt;p&gt;Webは時期に次世代の進化をとげる。そのときにオープンソースは乗り遅れることになると思っています。また数十年先になればサーバーコストも低くなって、オープンソースにできるかもしれないが、人工知能の活用はどうしても十分な性能を出せるプラットフォームが必要になる。だから最初のうちは大企業しか参入できないだろう。だとすると時代の変化に併せて改善を最速で進めていくためには個々のCPUを使うことが鍵になってくる。まだディープラーニングなどのアルゴリズムだとCPUだとスペックが足りないが、より効率のよいアルゴリズムが開発されるか、ボクが開発するだろう。&lt;/p&gt;

&lt;p&gt;Geneは次世代のウェブマネジメントを牽引するツールになる。
そう信じている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>人工知能アルゴリズムをつくるために</title>
      <link>http://jp.atsushimori.com/algorithms/</link>
      <pubDate>Sat, 17 Dec 2016 09:01:25 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/algorithms/</guid>
      <description>

&lt;p&gt;いまさらながら勉強をはじめた。プログラミングの知識をある程度得ると、もっとプログラムを小さくしたいと思い始める。たとえば、いつくつかのイベントを配列にしたりとか、ループで生成するとか、すこしでも小さなコードで多くのことをやりたいと思うのがプログラマーというものなのでしょう。とはいっても、ゲームとかCGとかハードウェアを扱うプログラマーなんかきっとパワフルなアルゴリズムをグワングワン使いこなしてるんだろうなーと思うと諦めたくもなります。ただ、物事を始めるのに遅いということはないと思うので、やってみる。現にこの数ヶ月でNode.jsとRailsとC++（の入り口）はある程度扱えるようになった。&lt;/p&gt;

&lt;p&gt;今は何かに取り憑かれたかのように毎日プログラミングをしている。今日も13時間以上ぶっ続けでコーディングしていた。それは製品づくりの佳境ということもあるけど、ある種の現実逃避なのかもしれない。今やらなきゃいけないという強迫観念みたいなものに推し進められているこのごろ。&lt;/p&gt;

&lt;p&gt;たとえば、10行で書くプログラムを3行にするとか、それはもうググってコードを切り貼りしてという世界ではない。むしろ、少しプログラミングの勉強をすると、自分の頭で考えて書いているコードがどれだけ少ないかということに気づく。別に動けばいいのだけど、もはやプログラミングは表現のツールなんだと思う。だから本人が良しとしなければ完成しないのだ。&lt;/p&gt;

&lt;p&gt;表現のツールということで言えば、音楽と似ている。音楽もおそらく音楽家同士が集まれば、ほとんどの場合どこかにコメントしたくなる。&lt;strong&gt;それは個々の表現のフィールドをもっていて、一致することはない&lt;/strong&gt;からだろう。プログラミングも似ているところがあるのかもしれない。やっぱり優秀だと一般的に言われている人のコードはスマートだ。&lt;/p&gt;

&lt;p&gt;さて、話はそれましたが、アルゴリズムの話ですね。今、人工知能のビジネス市場に入っていくために、少し遠回りな手法をとろうとしていて、そのための製品をつくっています。それは今ある技術でできるものなのでいいのですが、ボクが考えていることを実現していくためには、既存の考え方では立ち行かなくなると思っているので、原理から考えられる頭を鍛えようというのがアルゴリズムを勉強する動機です。&lt;/p&gt;

&lt;p&gt;あるいは、世の中の答えもある種のアルゴリズムによって導き出されることが多いと思うので、アルゴリズムを紹介しながら、それを日常に当てはめるとどんなことに使えるか？みたいな遊び半分でやっていきたいと思っています。&lt;/p&gt;

&lt;p&gt;おそらく数学をやっていた人なら、学生時代から「アルゴリズム」という言葉に触れるのでしょうが、ボクが初めて「アルゴリズム」という言葉を認識したのは「Google」の「アルゴリズム」です。魔法の言葉みたいな感じで、「アルゴリズムが・・・」「アルゴリズムが変わりましたね・・・」なんて会話が飛び交っているマーケッター界隈をみていると、今の頭で考えると不自然ですね。&lt;/p&gt;

&lt;h2 id=&#34;アルゴリズムとは何か&#34;&gt;アルゴリズムとは何か？&lt;/h2&gt;

&lt;p&gt;ある情報によると、アルゴリズムとは、&lt;strong&gt;ある値あるいはある値の集合を入力とし、ある値あるいはある値の集合を出力する明確に定義された計算手続き&lt;/strong&gt;とある。もう入り口から堅いんだよな。要するに計算式だね。計算には入力値と答えが必要だもんね。どちらにせよ、プログラミングの世界では日常的につかっていることなんだろうから、その延長でより高度でスマートな計算手法を身に着けていけたらと思います。&lt;/p&gt;

&lt;p&gt;そうそう、Googleの「アルゴリズム」というのが＝検索順位みたいに扱われているのが違和感があったわけですね。ただの計算式ですから。人工知能だって魔法じゃない。計算式だ。シンプルな計算だけだと決まった答えしかだせないから、ランダムな値や秩序のない値をぶつけたりして、偶然性を取り入れながら人間の脳に近づけるってこといろいろやられているみたいですね。ある種魔法か、おそらく、すでにこうしたらこうなるという計算を辿れる人はいないほど、アルゴリズムは進化しているはずだ。ディープラーニングだって扱う情報が画像の何十万、何百万というピクセルデータを追える人間なんていない、見る人によっては魔法かもしれない。&lt;/p&gt;

&lt;h2 id=&#34;アルゴリズムの種類を少し予習&#34;&gt;アルゴリズムの種類を少し予習&lt;/h2&gt;

&lt;p&gt;さて、どんなことを学ぶのかなーと思って1000ページ超えの教科書を開いてみたのだけれど、数式ばっかでなにひとつ理解出来なそう。まぁ、これはプログラミングも同じで、最初はムリと思っても、分解してやってくといつのまにか飛び級で分かった感じになると信じよう。目次から大項目だけ書いてみよう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;関数の増加&lt;/li&gt;
&lt;li&gt;分割統治&lt;/li&gt;
&lt;li&gt;確率的解析と乱択アルゴリズム&lt;/li&gt;
&lt;li&gt;ヒープソート&lt;/li&gt;
&lt;li&gt;クイックソート&lt;/li&gt;
&lt;li&gt;線形時間ソート&lt;/li&gt;
&lt;li&gt;中央値と順序統計量&lt;/li&gt;
&lt;li&gt;基本データ構造&lt;/li&gt;
&lt;li&gt;ハッシュ表&lt;/li&gt;
&lt;li&gt;2分探索木&lt;/li&gt;
&lt;li&gt;2色木&lt;/li&gt;
&lt;li&gt;データ構造の補強&lt;/li&gt;
&lt;li&gt;動的計画法&lt;/li&gt;
&lt;li&gt;貪欲アルゴリズム&lt;/li&gt;
&lt;li&gt;ならし解析&lt;/li&gt;
&lt;li&gt;B木&lt;/li&gt;
&lt;li&gt;フィボナッチヒープ&lt;/li&gt;
&lt;li&gt;van Emde Boas木&lt;/li&gt;
&lt;li&gt;互いに素な集合族のためのデータ構造&lt;/li&gt;
&lt;li&gt;基本的グラフアルゴリズム&lt;/li&gt;
&lt;li&gt;最小全域木&lt;/li&gt;
&lt;li&gt;単一始点最短路問題&lt;/li&gt;
&lt;li&gt;全点対最短路&lt;/li&gt;
&lt;li&gt;最大フロー&lt;/li&gt;
&lt;li&gt;マルチスレッドアルゴリズム&lt;/li&gt;
&lt;li&gt;行列演算&lt;/li&gt;
&lt;li&gt;線形計画法&lt;/li&gt;
&lt;li&gt;多項式とFFT&lt;/li&gt;
&lt;li&gt;整数論的アルゴリズム&lt;/li&gt;
&lt;li&gt;文字列照合&lt;/li&gt;
&lt;li&gt;計算幾何学&lt;/li&gt;
&lt;li&gt;NP完全性&lt;/li&gt;
&lt;li&gt;近似アルゴリズム&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;映画のタイトルかよっ！&lt;/strong&gt; ってツッコミいれたいくらい非日常的な言葉がならんでますね。クイックソート、フィボナッチ、行列演算あたりですかねー、少し知っているのは。先が思いやられる。&lt;/p&gt;

&lt;p&gt;個人的に気になるのは&lt;strong&gt;貪欲アルゴリズム&lt;/strong&gt;！貪欲な人間が貪欲アルゴリズムで解けるのか、ぜひ試したい。「van Emde Boas木」に関してはなぜ「木」だけ訳した？ってこれまた疑問が残ります。どうせなら全部英語にしちゃえばよかったのに。あとはだいたい英語にすれば映画タイトルにそのまま使えますね。あ、「ハッシュ表」って「ハッシュテーブル」じゃん。なんか逆に中途半端な日本語によってわかりづらくなっているような・・・基本的にプログラミングだとおおよそググっても英語の記事にたどり着く場合が多いので、ある程度の英単語なら結構みんなわかるはずだし。&lt;/p&gt;

&lt;p&gt;さてと、今年の途中から高校数学IA,ⅡB,ⅢC（Cはなくなったの？）を改めて勉強してて、数学にも大変興味がでてきているところなので、アルゴリズムをグリングリンつかえるように貪欲にがんばっていきたいと思います。まずはアルゴリズム勉強開始の宣言ということで。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>オープンソースは最高なのか？</title>
      <link>http://jp.atsushimori.com/how-to-use-open-source/</link>
      <pubDate>Mon, 12 Dec 2016 02:37:31 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/how-to-use-open-source/</guid>
      <description>&lt;p&gt;オープンソースは確かに良い。社会的意義もある。ただ、プロジェクトの在り方は慎重に選択する必要があると思っています。&lt;/p&gt;

&lt;p&gt;たとえば、Apple製品。仮にオープンソースだとしたら、仕入れなどの製造コストは抜きにして、AppleがオープンソースプロジェクトとしてMacを管理していたとしたら今日までの製品は誕生しただろうか？答えはおそらくしていない。100%ではないが、オープンソースだった場合、今のレベルのApple製品は誕生していなかっただろう。&lt;/p&gt;

&lt;p&gt;なぜ、Apple製品は良かったのか。答えは簡単。Steve Jobsという優秀なプロデューサーがいたからに他ならない。もちろん、Steve Jobsがこの世にいなくなった今日もApple製品は相変わらず優れていることが多い。ただ、何かが変わった。疑問を持つことが多くなった。ボクは今iPhobe7を使っているが、それまではiPhone5Sを使っていた。画面が大きくなったiPhoneを初めて使った感想は画面サイズがイマイチしっくりこないということだ。アプリでブラウジングしていて、一つ前のページに戻りたい場合、多くの場合左上に「戻る」アクションエリアがある。iPhone5では片手で届いたのだが、iPhone7ではがんばらないと届かない。あるいはApple Music。ダウンロード済みコンテンツとアルバム一覧から局を選択する場合とで一覧に表示されている局が異なっていてどれをダウンロードしていて、どれをダウンロードしていないかわからなくてモヤモヤが残りながら使っている。&lt;/p&gt;

&lt;p&gt;もう一度言いたい。何かが変わった。かつての疑問を持たずに使えたApple製品ではなくなってしまったかのうようだ。&lt;/p&gt;

&lt;p&gt;法人としてのAppleは誰もが認める成功企業だ。ただ、今の製品にはボロがでてきている。それは偶然なのだろうか？プロデューサーであるSteve Jobsの存在を思い返さずにはいられない。&lt;/p&gt;

&lt;p&gt;話は戻ってオープンソースのことについて触れよう。オープンソースプロジェクトは日々助けられているし、否定するつもりは一切ない。社会的意義があることだし、素晴らしい。ただ、最高の製品を作りたいときは、オープンソースは良くないのではないかと思い始めている。&lt;/p&gt;

&lt;p&gt;オープンソースのメリットは、改善のスピードと発展のスピードが速く、技術そのものを加速する力もある。逆にデメリットは、プロデューサーが分散することで、製品のコントロールが難しくなるということだろう。オープンソースとしてヒットした製品といえば、WordpressあるいはRuby on Railsなどが挙げられる。いづれも素晴らしい製品だし、日々お世話になっている人も多いことだろう。ただ、何かが足りない。&lt;/p&gt;

&lt;p&gt;オープンソースの開発は不特定多数の開発者がソースコードをいじる。Gitなどで管理され、masterを管理するひとはもちろんいるし、修正リクエストを精査することだってできる。ある種の組織運営に近い話になる。しかし、オープンソースは民主主義になりがちなので、管理者の権限をストレートに活かし切ることはできない。そこが最大の欠点である。&lt;/p&gt;

&lt;p&gt;だから最高のプロダクトを作り出したいのであれば、おおよそ有能なプロデューサーの権限のもと、製品をつくり、改善していくことが必要だと感じます。&lt;/p&gt;

&lt;p&gt;今、渾身のプロダクトを開発しています。それでこの定義を証明したいと思っています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>会社である必要性と経営者の種類</title>
      <link>http://jp.atsushimori.com/why-company/</link>
      <pubDate>Fri, 09 Dec 2016 20:57:50 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/why-company/</guid>
      <description>

&lt;p&gt;「会社やめたいっす」と言う人って結構いる。決まってボクは「やめれば？」と言う。でもそれでやめた人と会ったことがない。そして、それは正しい選択だろうと思う。ボクはやめようと思って実際に数ヶ月後には勤めていた会社をやめていた。組織である法人と個人の間にはそもそも求めることに矛盾があります。法人は組織として機能しつづけるように仕組みをつくっていく、つまり個人の能力に依存しない組織運営を作りたいものであり、個人というのはいつだって個人の能力アップを望んでいるものだろう。（分野は異なると思いますが。）つまり、そもそも会社と個人というのは相反する思想のもと、共存しているのです。&lt;/p&gt;

&lt;p&gt;本来は、個人それぞれにやりたいことをやればもっと世の中に多様性が生まれることでしょう。でも、そうはならない。会社に居続ける人は多い。その結果、「会社をやめたいけれどすぐにはやめられないし、やりたいこともみつからない」という人が増える。現に「自分が何をやりたいのかわからない」という人はなぜか多い。勝手に考えた結果、きっとそれは会社という組織体によって、「個」と向き合う時間が減るからだろうという結論にたどりついた。&lt;/p&gt;

&lt;p&gt;視点を変えて、フリーランスの人たちの世界で考えたらどうだろうか。彼彼女らはみんな、「やりたいけどできないことがたくさんある」と言う。やりたいことはいくらでもあるけれど、今やっている仕事の納期に追われてできない、あるいはその仕事を蹴ると収入に困るといった別の理由でやりたいことができずにいたりする。そもそも独立する人はやりたいことがあって独立するものだからと思う人もいるかもしれないが、それは違います。ボクもフリーランスとして2年間くらいやっていましたが、始めたときは何をやればいいかもわからず、なんで会社をやめたかといえば、「やめたかったから」という理由だけでした。やっぱり自分はこんなもんじゃないみたいな根拠のない自信と、それに対する葛藤に耐えかねたという忍耐力のなさがそうさせただけで、何もビジョンなんてありませんでした。&lt;/p&gt;

&lt;p&gt;フリーランスになって、まず始めること、それは「自分のできること」「自分のできそうなこと」をやってみるということです。やりたいことをやり始められる人は優秀ですが、残念ながらボクはそうではありませんでした。ただ、今思うのは、はじめるときに何を始めるかなんてことはこれっぽっちも意味がないということ。同じく、一生使える屋号や会社名を頑張って考えることも結構無駄。やってしまえば、だんだんしっくりくるものなのです。ここまでは、自分の欲望に素直かどうかって話ですね。&lt;/p&gt;

&lt;p&gt;たまに考えるのですけど、「なんで会社なんてやってるんだろう」という自分に対する疑問の話です。ボクも場合は、自分の生きる価値、生きるに値する生き方を全うするためには一人では成し得ないことがわかりきっているからめんどうでも会社でいる必要性があるという考えのもと、毎日を過ごしています。&lt;/p&gt;

&lt;p&gt;世の中には多くの「社長」と呼ばれる人がいて、そのタイプはいくつかにクラスタリングできると思っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「社長」という言葉に魅力を感じる人&lt;/li&gt;
&lt;li&gt;親の代から引き継いで2代目になる人&lt;/li&gt;
&lt;li&gt;まわりが必要として社長になるひと&lt;/li&gt;
&lt;li&gt;根拠のない自信と果てしない理想を漠然と持った人&lt;/li&gt;
&lt;li&gt;自分の存在意義を実現するために会社にする人&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;概ね、この5つに分類できると思います。
せっかくなので、それぞれのタイプの人を解説してみましょう。ちなみにボクは5個目の「自分の存在意義を・・・」のタイプです。&lt;/p&gt;

&lt;h2 id=&#34;社長-という言葉に魅力を感じる人&#34;&gt;「社長」という言葉に魅力を感じる人&lt;/h2&gt;

&lt;p&gt;若い人に多い。すぐにやめたほうがいい。「社長」と呼ばれたり、トップであるという仮想権力に魅力を感じる人。本当に有能な経営者は「社長」という言葉を使う。例えば、一般的な「社長」というイメージを利用して業務を円滑に進めたり、交渉を有利にすすめたり、組織の関係性を明示化するために使う。決してつかわれてはならない。&lt;/p&gt;

&lt;h2 id=&#34;親の代から引き継いで2代目になる人&#34;&gt;親の代から引き継いで2代目になる人&lt;/h2&gt;

&lt;p&gt;社長っぽい。野心というよりは改革に積極的で柔軟であるケースが多い。多分、2代目としての意味を全うするというところに重きをおいているのだと思う。「会社というものはこういうものだ」という感受性が強い場合も多い。親の背中を追って、肌身で経営を身近に感じ続けることができたからであろう。いい人が多い。&lt;/p&gt;

&lt;h2 id=&#34;まわりが必要として社長になる人&#34;&gt;まわりが必要として社長になる人&lt;/h2&gt;

&lt;p&gt;例えば、取引先が「あなたに頼みたいから法人化してくれ」といったり、売れっ子になって法人化したほうが税金面でメリットがあるから法人化するという人たち。とても健全。そうあれたらいいですね。自然の摂理みたいな感じで、こういう人は社長であるべきかなと思います。そこからビジョンをつくっていく人も多い。&lt;/p&gt;

&lt;h2 id=&#34;根拠のない自信と果てしない理想を漠然と持った人&#34;&gt;根拠のない自信と果てしない理想を漠然と持った人&lt;/h2&gt;

&lt;p&gt;「自分はこんなもんじゃない」という自信と、「ビッグなことをやるんだ！」という漠然としたものに突き進める人。盛大な勘違いを起こせる人。こういう人は枝分かれしてまた２パターンくらいに分かれる。一つは、現実と理想にギャップを感じて簡単にやめる人、もうひとつは本当にビッグになる人。&lt;/p&gt;

&lt;h2 id=&#34;自分の存在意義を実現するために会社にする人&#34;&gt;自分の存在意義を実現するために会社にする人&lt;/h2&gt;

&lt;p&gt;これはもとから持っているモヤモヤはなんだろう、なぜ自分は生きているのか？なぜ、存在していいのか？ということを考えるタイプで、何かとりあえず手を動かしながら、考え続けることによって確信していく場合もある。自分の存在意義を第一にするため、社会的な発展を望んでいたり、より多くの人に影響をあたえるようなことに関心をもちやすい。存在意義とつながっているので、何があっても拭えない。もくもくと淡々とやっていく。es（超自我）に気づいてしまった人。&lt;/p&gt;

&lt;p&gt;我ながら良い分類ができたと思う。なので、経営者は「社長」という言葉で片付けるといろいろ正しく受け止められなくなるくらい幅をもった人たちであるということを理解すべきです。&lt;/p&gt;

&lt;p&gt;本当に幸せに生きたいのであれば、絞ることだとボクは思います。たとえば、結婚も愛する人を「絞る」ということだろうし、誇りを持った職人さんも技術を「絞る」ということであります。フォーカスすることで人は幸せになれるのだと思います。逆に言えば、「捨てる」ことでもある。たとえば、過去の辛いことを忘れるというのも「捨てる」一種だ。持ち続けることはやっぱり負担なのだ。「絞る」術や「捨てる」術がないときは、いろいろやってみるしかない。自分の感じることに素直になりながら、ただ、変化していくしかない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>プログラミングの不思議</title>
      <link>http://jp.atsushimori.com/programming-mystery/</link>
      <pubDate>Wed, 07 Dec 2016 02:09:39 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/programming-mystery/</guid>
      <description>&lt;p&gt;いろいろと考えてみて、いろいろやってみるんだけど、やっぱりうまくいかなくて、寝て、起きて、散歩して、しばらくするといつの間にかできている。&lt;/p&gt;

&lt;p&gt;そんな不思議があります。向き合っていると必ず新しいことができるようになる。それがプログラミング。&lt;/p&gt;

&lt;p&gt;そして、プログラミングをする上で大事だなと思ったのは、最初の段階から求めすぎないこと。&lt;/p&gt;

&lt;p&gt;リーンスタートアップをはじめとして、ビジネス的にもよくいわれていることであるのですが、プログラミングにおいてもそれは言えるようです。スタートは自分の技術に自身があるからトライしてみるもので、あの製品を超えてやろうとか、云々考えるのですけど、思ったより実力がなくて、少々行き詰まる。こうしてつくっていくから更に技術力が上がるという見方もあるのですが、最初のり想像が高すぎてしまうと、途中でバテてしまうというリスクが生じます。できる範囲でまずは大枠をつくり、形にする。それで、部分的にブラッシュアップしていくのが良さそうであります。&lt;/p&gt;

&lt;p&gt;部分的なブラッシュアップというのは例えば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;関数の簡略化・動作速度の向上&lt;/li&gt;
&lt;li&gt;部分的により効率の良いアルゴリズムに書き換えること&lt;/li&gt;
&lt;li&gt;製品として長けているところをより良くする機能を追加すること（あるいはフォーカスすること）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などです。&lt;/p&gt;

&lt;p&gt;そうすることで、数日の間にプロトタイピングが終わり、一旦達成感を味わったあとで、次の課題に取り組める。課題の分割をすることで、気持ちよくプログラミングを継続的に行うことができるという点で、こうした進め方がいいなと個人的に思いました。&lt;/p&gt;

&lt;p&gt;今はElectronでMacアプリをつくっています。Javascriptって奥深いなーなんて感じてます。話は変わりますが、新しい技術的な入門にドットインストールがわかりやすくていいなと思うんですけど、解説をしている田口元氏は本当にすごすぎる。いや、たしかに言語を超えて共通の理解ってのはあるけど、そもそもプロパティやメソッドを覚えなきゃいけないなんてことはザラにあるわけで、それを解説できるレベルで何十言語も扱っている感じ、本当にすごすぎる。一体どんな生活をしているんだろう。。マイナーっぽいレッスンを聞くと疲れ気味な感じの時があって、裏側の苦労を想造してしまう。回し者ではないですが、ドットインストールは本当に社会的意義のあるサービス。&lt;/p&gt;

&lt;p&gt;話はそれましたが、プログラミング時に急に悟るみたいな体験をなんどもしているので、不思議だなーと思ってブログを書いてみました。&lt;/p&gt;

&lt;p&gt;ではでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>これからの時代、個人的にC&#43;&#43;を推していきたい</title>
      <link>http://jp.atsushimori.com/lets-start-cplusplus/</link>
      <pubDate>Thu, 24 Nov 2016 16:09:43 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/lets-start-cplusplus/</guid>
      <description>

&lt;p&gt;これからC++とかPythonの需要が高まるんじゃないの？という話です。&lt;/p&gt;

&lt;p&gt;ボクはHTMLからはじめ、PHP、Ruby、Scala、Javascript、C++など数々の言語に触れてきました。言語をまたいでいくことで、プログラミングのポイントがつかめるようになり、プログラミングは本当におもしろいとのめり込んでしまいました。&lt;/p&gt;

&lt;p&gt;特に、大きく変わったタイミングというのが、変数の使い方やオブジェクト指向に関して理解したタイミングです。たとえばHTMLではただデザインを忠実に表現するために書くということがメインで、正直かなり昔に飽きました。CSSも同様です。CSSの場合はCSS3のアニメーションやJavascriptとの組み合わせで多少は楽しむことができますが、それもだいたい全体像やできることが理解できてくるともういいやという感じになってしまいます。&lt;/p&gt;

&lt;p&gt;そこで、本題です。現在ボクはC++を使ってまだ世の中にない静的なWebジェネレーターをつくっています。はじめた動機としては、現状の動的なウェブサイトの表示時間が重いと感じていたことが発端です。そこからWebサイトについて考えていくと、今こそWebサイトのあり方を変えていくタイミングなんじゃないかと思うようになりました。速度だけではく、管理の仕方や動的な部分と静的な部分の扱いなど、そして人工知能による進化、つめこみたい機能はたくさんあります。とりえず、カタチにすべく奮闘中です。&lt;/p&gt;

&lt;p&gt;そもそもが性能（速度）を重視するというモチベーションだったので、静的サイトにすることにしました。また、同時にGUIなどがあったほうが便利という人も多いので、多くの方に使っていただけるようにオープンソースあるいは、単に無料提供という形で公開予定です。&lt;/p&gt;

&lt;p&gt;フロントはHTMLを書き出す、書き出すツールとしてC++ということになります。何の言語でもいいかなと思ったのですが、人工知能の開発などもちょくちょくやりはじめているので、C++をある程度自由に使いこなすようになることで、いろいろと相乗効果があるかなという理由でC++を使っています。&lt;/p&gt;

&lt;p&gt;C++というと古い言語というイメージを持つ方もいるかもしれません。ただ、個人的に言語の生まれてからの歳なんてどうでもいいと思っています。むしろ、性能を重視するのであれば自ずと選択肢は限られてきますし。最近はだれでも簡単に扱うことのできる各種フレームワークが充実していて、フレームワーカーがすごく多いなと思いました。それはそれで需要がありますし、良いのだと思うんですが、最高のものを作ろうと思ったら、もう一度作り直す気持ちで、一から精度を高めていくということが必要だと感じています。WordpressやRuby on Railsを使えることでできることは多いですが、かつてのスティーブ・ジョブズのような仕事はできないと思うのです。スティーブ・ジョブズになりたいわけではないですが、根本から覆るような最高の製品を作りたいと思っているので、言語の選択も慎重に行いました。&lt;/p&gt;

&lt;h2 id=&#34;人工知能が中級言語の追い風&#34;&gt;人工知能が中級言語の追い風&lt;/h2&gt;

&lt;p&gt;ちょうど今のタイミングは人工知能に注目が集まっています。個人的な見解ですが、これからプログラマーとして根本的にハックしたいのであれば、C++やPythonを使うことをおすすめしたいと思います。決して古い言語が使えないわけではありません。現にGoogleやFacebookなどの人工知能の開発もC++やPythonが使われるケースが多いように見受けられます。人工知能は本質的に高速に処理する必要があるため、CやC++、Pythonなどがよく使われるというのがあると思います。ハードウェア寄りかWeb寄りかによって、すべてがこれらの言語で書けるかというと現実的には組み合わあせていきますが、中級言語＋PHPや中級言語＋Javascriptなどがより発展していくのではないかなと思っています。特にJavascriptに関してはNode.jsなんかが結構大きな変化で、動的にWebページを扱うツールも新しい形で代替ができそうなので、色々変革の時期かなと感じています。&lt;/p&gt;

&lt;p&gt;一般的にCとかは低級言語と言われる場合もありますが、アセンブリ言語の分類が難しくなるので、中級言語としておきましょう。あまり低級言語に寄り過ぎると、一人で開発しなくてはならなくなるので、あまりおすすめする理由はないですが、中級言語であれば、使える人はたくさんいるし、歴史がある分、方法論にもこまりません。（選択は悩みますが。。。）とまぁ、こんなことを漠然と考えている人はたくさんいると思うので、結果的にC++プログラマーやPythonプログラマーが増え、賑わいそうだなと思っています。楽しみです。&lt;/p&gt;

&lt;p&gt;他の高級言語が悪いという議論ではありません。適材適所なのでどの言語も表現にこまることはあまりないでしょう。ただ、個人的な意見としてC++を推していきたいし、コミュニティーなんかもつくっていけたらと構想しているところです。&lt;/p&gt;

&lt;h2 id=&#34;c-おもしろい&#34;&gt;C++おもしろい&lt;/h2&gt;

&lt;p&gt;特にWeb寄りの開発がメインだったボクの場合は、ファイル操作一つとっても面白いのです。特に自分のMac内の作業をいろいろ自動化したりとか、楽しみが増えた感じがします。メモリの管理とかはまだまだこれからですが、性能を最大限引き出していくという点ではなんだか性に合っていてワクワクするポイントでもあります。もう少し覚えたらサーバーを立ててみたりして、非同期通信とかも実験してみたい今日このごろです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「したい」と「すべき」の違い</title>
      <link>http://jp.atsushimori.com/want-should/</link>
      <pubDate>Mon, 21 Nov 2016 14:45:47 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/want-should/</guid>
      <description>

&lt;p&gt;とある新規事業への参画を打診いただいて、事業について打ち合わせをしていたときのこと。ディスカッションの中に微かな違和感を感じ、何かと思ったら「したい」と「すべき」の取扱について考え方が違っていたからであることに途中で気づきました。&lt;/p&gt;

&lt;p&gt;どのようなことを話していたのかといえば、サービス内容や事業の枠を定めるための議論をしていたわけです。そもそもなぜ、その新規事業の話が沸いたかといえば、とある既存事業のサービスには定員数があり、ユーザーが待機状態で受け入れできないという課題があり、待機児童ならぬ待機ユーザーがいるので、器を用意しようという話だったのですが、そこで、話をもってきてくださった方の話を伺うと、現状の状態がこうだから、こういうものが必要だという説明をしてくださいました。たとえば、既存サービスとの連携を将来的に考えていて、競合にならずにお互いにシナジーを生むような連携を残しながら事業として発展させていきたいといった具合です。&lt;/p&gt;

&lt;p&gt;フムフムときいていたのですが、どうも頭の中が整理できず、ボクの頭に良い案が浮かばない状態が続きました。考えを巡らせていって途中で気づいたのですが、この当初の話においての会話は「すべき」ベースでの話であったため、それを自分たちがやる必然性に納得がいっていなかったのだと思いました。そもそもボクは自分の会社がありますが、それは「したい」ことがあってやっているわけで、「すべき」だとは思っていないのです。ビジネス的に大人の世界ではこうした必要であるから用意するというのがよくあります。それは必要だから用意するというごくごく当たり前で理にかなったプロセスなのですが、そこには大義がなかったりするのです。&lt;/p&gt;

&lt;p&gt;おそらくボクはそれが不思議だったのです。不思議というか納得感がなかったんですね。事業はいつだって「したい」からやるものだという潜在意識があったからです。&lt;/p&gt;

&lt;p&gt;なので、「なんかこう、大義がない感じがして気持ちが悪いです」と言ってみたら、すべてが整理できました。大義はつくるものではないとは思いますが、必要なことだなと改めて思いました。&lt;/p&gt;

&lt;h2 id=&#34;すべき-したい-が一番よい&#34;&gt;「すべき」＝「したい」が一番よい&lt;/h2&gt;

&lt;p&gt;思い返してみると、世の中には「すべき」論がたくさんあるなと思いました。似た例でいえば、保育園・幼稚園の待機児童問題。園を増やせば待機しなくて済む、ただそれだけの話がなぜ、なかなか改善したいのでしょうか。かなり偏った考えだとは思いますが、ボクの所感では「すべき」という人はたくさんいるけれど、「したい」という人が足りないのではないかと考えました。「すべき」というのは義務化しがちです。それがないといけない。でも、そうしていくと本来の意義が霞んでいくのではないでしょうか。だからこそ、「したい」論をベースに物事を立ち上げるというのが大事だとボクは思います。&lt;/p&gt;

&lt;p&gt;それでもって「すべき」＝「したい」が一致すれば、とてつもなく大きなエネルギーが生まれます。なので、いつもイコールであればいいのですが、大抵はどちらかに偏りがちで、世の中と個人の頭がマッチングできずに消えていってる感はありますね。承認欲求のひとつだとは思うのですが、やっぱりそれなりにエネルギーを注ぐためには自分がやる必然性を感じていたいというのが人間なのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;したい-をフィルターとしてつかう&#34;&gt;「したい」をフィルターとしてつかう&lt;/h2&gt;

&lt;p&gt;そうはいってもすべて「したい」論では衝突が多く、疲れてしまってエネルギーを失います。なので、何かを始めるときのベストな思考プロセスは「したい」→「したいことをやるためにすべきこと」という順番で考えていけば、熱量をもって取り組めるのではないかということにしておきましょう。あれはすべき、これはすべき、と制約が増えると一般的なものしか生まれませんので、やっぱり一回「したい」を挟むとプロジェクトとしても面白くなるのかななんて考えたりしています。&lt;/p&gt;

&lt;p&gt;たまたま会話の中の違和感について考えていてたどりついた勝手な結論ではありますが、やっぱりWantとShouldの違いというのは大きし、結果に大きく影響するなと思いました。どちらの思考でも形を作ることはできます。だから、普段の会話のなかでは自然に流れがちなことなんだと思いますが、最初の方向がずれていては分裂する未来しかありません。逆にやりたいと思ったからやるというプロセスを踏むと、軸がぶれません。シンプルな理由なので、忘れることもありません。小さな課題を修正しながら、したいことをすればいいというシンプルなことですが、人の考え方は多岐に渡るので、ぼーっとしていると流されてしまいそうです。自分がやりたいのか？という疑問を常に持っていたいものです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>クリエイターが見積もるべき時間とお金</title>
      <link>http://jp.atsushimori.com/the-best-estimation/</link>
      <pubDate>Mon, 14 Nov 2016 13:56:59 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/the-best-estimation/</guid>
      <description>

&lt;p&gt;会社ではたらくプログラマーや、フリーランスのデザイナー。一度や二度は見積もりに失敗してしまうということはありませんか？ボクは何度もあります。そんな失敗から得た正しい時間とお金の見積もり方法について、まとめておきます。&lt;/p&gt;

&lt;h2 id=&#34;一度は失敗する時間とお金の見積もり&#34;&gt;一度は失敗する時間とお金の見積もり&lt;/h2&gt;

&lt;p&gt;見積もり方法については諸説あります。例えば、フリーランスで最初のうちは黙って2倍の金額を提示しておけだとか、作業時間は少なくとも倍とっておけといった具合にです。しかし、そのまま鵜呑みにしてしまっては顧客に対して誤解を与えたり、あるいは自分でも理屈がわからず返答にこまるという自体に陥ります。&lt;/p&gt;

&lt;p&gt;ではなぜ、わたしたちは見積もりに&lt;strong&gt;失敗し続けて&lt;/strong&gt;しまうのでしょうか。一度だけならともかく、複数回同じことが起こってしまっているという人は意外と多いのではないでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;良いものを提供したいという想いが裏目にでる&#34;&gt;良いものを提供したいという想いが裏目にでる&lt;/h2&gt;

&lt;p&gt;理由の一つは、仕事に対する前向きな姿勢です。見積もりに失敗しない人はビジネスロジックを十分に理解し、正しい見積もりができているか、そもそも価値を基準に成果物を考えていないため、&lt;strong&gt;自分が働いた時間=見積もり金額&lt;/strong&gt;だと勘違いしているのだと思います。&lt;/p&gt;

&lt;p&gt;これはスタンスの違いにすぎないので、見方によっては作業時間を成果物とみなすことは問題ではありません。&lt;/p&gt;

&lt;p&gt;しかし、わたしたちプログラマーやクリエイターは常に&amp;rdquo;創造すること&amp;rdquo;を強く意識しています。そうした人たちにとって、成果物とは&lt;strong&gt;価値&lt;/strong&gt;であり、&lt;strong&gt;結果&lt;/strong&gt;なのです。
間違った見積もりの思考プロセスはこうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;お客様のために貢献したい&lt;/li&gt;
&lt;li&gt;最初だから値引きしてもいいか（予算もないみたいだし）&lt;/li&gt;
&lt;li&gt;よし、金額以上の価値を提供するぞ！&lt;/li&gt;
&lt;li&gt;いままでだいたいこのくらいの時間がかかってるけど、今回は急いでるみたいだし頑張ろう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中で正しいのは最初のひとつのみです。あとは間違っています。金額以上の価値を提供するぞというのは一見正しくも見えます。しかし、気づいていないかもしれませんが、金額は自分が決めているのです。もし金額以上の価値を提供するぞと意気込んでいるのであれば、それはそもそもの価格設定が間違えると考えたほうが妥当だと考えます。&lt;/p&gt;

&lt;p&gt;簡単に言えば、金額以上の価値を提供しようとして起こることは、自分の時間のタダ売りです。しかも、多くの場合それは顧客には伝わりません。なぜなら、顧客は顧客の求めている納品物像をおっていて、クリエイターはプロの目線で価値の向上をはかろうとします。そこには理解し合えない知識の差があり、その知識の差が価値をつくったり、あるいはすれ違って価値を落としたりするのです。&lt;/p&gt;

&lt;h2 id=&#34;知っていると知らないの差&#34;&gt;知っていると知らないの差&lt;/h2&gt;

&lt;p&gt;プロにお願いしている。そう顧客はいいます。ここでいうプロとは、「&lt;strong&gt;専門分野の知識を有していて、それを無駄なく価値を最大化してくれる人&lt;/strong&gt;」のことです。&lt;/p&gt;

&lt;p&gt;知らないこと、不足していることを補うこと自体に価値がある。それに気づかないとすれ違ってしまいます。&lt;/p&gt;

&lt;p&gt;しかし、クリエイターは自分の価値観、あるいは業界の価値観のなかで価値を最大化しようとします。ここですれ違いが起こります。そもそも知識がない（時間コストのプロコンの場合もありますが一旦おいておきましょう）人にそのディテールや運用時の便利さは&lt;strong&gt;想造&lt;/strong&gt;ができないのです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;想造と創造&lt;/strong&gt;がすれ違っている事実に気づく力が必要です。はい・・・。&lt;/p&gt;

&lt;h2 id=&#34;プログラマーやクリエイターの見積もり公式&#34;&gt;プログラマーやクリエイターの見積もり公式&lt;/h2&gt;

&lt;p&gt;さて、これらの前提を加味したうえで、公式を観てみましょう。
&lt;figure&gt;
&lt;amp-img src=&#34;http://jp.atsushimori.com/img/post/2016111401.png&#34; width=&#34;640&#34; height=&#34;169&#34; layout=&#34;responsive&#34; alt=&#34;式&#34;&gt;&lt;/amp-img&gt;
&lt;figcaption&gt;時間と金額の見積もり公式&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;ひとつひとつみていきましょう。まず、1.8をかけた見積もり時間ですが、優秀であろうプログラマー中嶋聡さんの発言に感化されました。2割の時間で8割のタスクをこなせるかどうかで、そのプロジェクトが期日通りに終えられるかを判断するという趣旨のものです。実際8割はただ上乗せしているのかというと、そうではありません。3割から先はクオリティーをアップするための時間で、実際に相応の時間がかかるのを見越してのことです。プログラマーならコードの可読性を高めたり、実行速度を速くする工夫をここで行います。デザイナーであれば、ディテールを詰めたり、パターンを変えたりして追加提案として顧客に提案していきます。&lt;/p&gt;

&lt;p&gt;いつも自分のやっている仕事は後半駆け込みで、コードを無理やり成立させたり、要望に応えるために上書き用コードをどんどん追加していったり。結果、なんとか納品というパターン心当たりはありませんか？顧客は満足することでしょう。顧客の頭の中の成果物とは一致しているため、不満は残りません。しかし、クリエイター側はどうでしょう？「もっとこうできた」とか「ここにバグが残ってるんだよなー。。」なにかしら残りませんか？ボクの知っているクリエイターは生粋のクリエイターなのでこうなります。&lt;/p&gt;

&lt;p&gt;人が良ければ、手に余裕があるときにさらっと直したりします。結果的にクリエイターと顧客の納得価値は一致しますが、この時点でクリエイターはかなり疲弊しているはずです。継続的に創造することがどんどん難しくなっていきます。&lt;/p&gt;

&lt;p&gt;見積もり金額については、正しい価格設定が行われていたとしても、顧客の要望次第で多くの場合は作業が想定を超える事態になります。なので、1.5をかけたとしても作業量に見合わない場合もあるでしょう。適宜調整してください。これは、相手が人間であるという点で振り幅を計算するためのもので、理不尽に金額を加算するものではありません。実際に経験から1.5〜2倍（場合によっては3倍？）膨らむため、事前に見えない作業量を正しく見積もっておくということが大切です。&lt;/p&gt;

&lt;p&gt;これに関しては、時間の見積もりが正しくできていれば、×1.5は不要になる場合もあります。ただ、計算としては、一般的な作業メニュー、金額を決めておき、「◯◯をする場合はいくら」という具合にメニュー化しておき、金額で個々の最適化を行うというのがやりやすいと感じますので参考にしてみてください。&lt;/p&gt;

&lt;h2 id=&#34;ポイントは時給設定-ここで見誤ることが多い&#34;&gt;ポイントは時給設定、ここで見誤ることが多い&lt;/h2&gt;

&lt;p&gt;では、どうすればよいのか。ポイントは&lt;strong&gt;時給を正しく設定し、それに忠実であるべき&lt;/strong&gt;だということです。
次の仕事につながりそうだから今回だけは特別にというのも、次の仕事をとるという観点では正解だと思います。しかし、それはもともとの予算感覚が自身のデフォルトの時給を1.5〜2倍程度上回っていれば良いと考えるべきでしょう。&lt;/p&gt;

&lt;p&gt;お付き合い当初、自身のデフォルト時給に見合う顧客だったとしても、では次回以降金額をあげられるかというと、多くの場合はそうではありません。顧客は顧客の中の納品物を納めてもらうことがゴールなので、次回以降、ディテールの価値を説明して金額をあげようと試みたところで、それは必要以上であるという認識にしかなりません。もし、本当に次回以降、本来の価格で提供したければ、その時点で次回の契約と金額を契約書として交わすくらいしないと実現は不可能でしょう。&lt;/p&gt;

&lt;p&gt;そう考えると現実的にそんなことはやらないのが日本人なのではないでしょうか。であれば、やるべきことは一つ、&lt;strong&gt;クリエイターやプログラマー自身が求める価値を価格に反映した時給設定を行うこと&lt;/strong&gt;です。自分の価格を決めるのは自分です。&lt;/p&gt;

&lt;p&gt;そうはいっても仲の良い顧客だしということであればそれは良いと思います。ただし、&lt;strong&gt;クリエイターとして目指す場所へ行く確率は低くなる&lt;/strong&gt;と覚悟しなければなりません。&lt;/p&gt;

&lt;p&gt;もし、求めている自分の姿が明確であるのなら、自分に正直でいることです。特には一般的に良しとされている価値観を疑うことも大切だとボクは思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>社長とプログラマー</title>
      <link>http://jp.atsushimori.com/ceo-vs-programmer/</link>
      <pubDate>Thu, 10 Nov 2016 17:23:35 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/ceo-vs-programmer/</guid>
      <description>

&lt;p&gt;プログラマーでありながら、社長でいることはとてもむずかしいです。&lt;/p&gt;

&lt;p&gt;とはいってもボクの会社は大した会社ではないので、ただ能力が足りていないだけなのかもしれません。ただ、本当に難しいのは目に見えています。そもそも社長業というのは、「やるべきこと」をやることであり、プログラマーというのは「やりたいことをやる」という相反する性質を持っているため、双方を両立させるのはとてもむずかしいのです。それは部活と勉強を両立みたいな話なのかもしれません。&lt;/p&gt;

&lt;p&gt;誤解を生みそうなので、それぞれの性質についてもう少し説明しましょう。社長業は「やるべきこと」をやることと言いましたが、じゃあやりたいことをやっていないというわけではありません。多くの社長は、「やるべきこと」の中で「やりたいこと」を見出して、楽しんで毎日を過ごしていることでしょう。でもそれは適用しただけであって、いつのまにか本能が消えてしまうということも多いのではないでしょうか。なぜ、「やるべきこと」が多いのか？それは、1人の社長でも100人の社長でも必ず多くのやるべきことが自動的に発生する仕組みになっているからです。人数が少なければ、経理や計画、日常の実務コントロールなどですぐ手一杯になり、人数が多ければマネジメントに大きな力を注ぎます。もっと複雑になるのだと思います。また、やりたいことが仮にあったとして、それを実現するためには自分の手だけではできないことが多く、経営という船に乗っている間に次々と変化していき、ほとんどの「やりたいこと」に着手すらできないでしょう。&lt;/p&gt;

&lt;p&gt;対してプログラマーは、どんなに忙しくてもつくってしまいます。できるとわかっているし、仕事としてプログラミングをやったことのある人であれば、作業量は想定できます。自分がやればできるのです。また、技術への関心がとても高く、次から次にワクワクするような技術に出会い、また作りたいものができてつくります。つくる人なんです。だから、できないことはない。もしかしたら作れないかもしれないという疑念は持たないことが多いはずです。そうはいっても会社でのプログラミングでは納期に追われ、やりたいことができないという人もいると思います。ただ、大きな違いは必ず実現することができるのです。&lt;/p&gt;

&lt;p&gt;つまり、両方をミックスすると時間がどうしても足りず、双方を食いつぶし続けるため、苦痛なのです。常に葛藤を抱えなくてはならない。ドラマでありそうな「わたしと仕事どっちがだいじなの？」という結末が待ち受けています。&lt;/p&gt;

&lt;p&gt;それでも、どちらもやめれないので、なんだか中途半端な気がしてきてまた葛藤する。実際に双方の機能がプラスとマイナスで打ち消し合って、気づいたら大きく物事が変わっていない日が続いているということもあります。&lt;/p&gt;

&lt;h2 id=&#34;岩田聡さんは本当に尊敬する&#34;&gt;岩田聡さんは本当に尊敬する&lt;/h2&gt;

&lt;p&gt;そうした理由から、多くの社長プログラマーは失敗するはずなのです。成功するためには、どちらかを封印しなくてはいけません。しかし、これは多くの場合の話であって、実際に両立していた人がこの世にいます。昨年お亡くなりになってしまいましたが、任天堂の元社長である岩田聡さんです。理想です。プログラマーにとっては知らない人がいないくらい有名ですが、プログラマーであり、社長であるという生き方を最後まで突き通した人物はこの世界にどれだけいるのでしょうか。多分ほとんどいないはずです。もちろん徐々にプログラミングする時間は減っていったと思いますし、あれだけの会社の経営者ですから、それは当然です。しかし、絶対にこの人はプログラマーであると認識してしまうのです。&lt;/p&gt;

&lt;p&gt;実現は難しい社長業とプログラミングという２つの性質に思うところはありますが、できることは岩田さんをみれば一目瞭然です。きっと、すべてをとったんだと思います。社長業もプログラマーである自分も。&lt;/p&gt;

&lt;p&gt;それは絶対に容易でないはずで、どちらも好きでいなければできません。どちらかに嫌悪感を持ってしまいがちですが、どちらも好きでいた。それがすごいことだと思います。そうとう頭が柔軟で、寛容だったんだと想像がつきます。アセンブリを読めて書ける社長なんてほとんどいないですからね。。（アセンブリがすごいわけでなく、そこまで深く知ることの興味力がすごい）&lt;/p&gt;

&lt;h2 id=&#34;プログラマーでありながら社長であり続けるためには&#34;&gt;プログラマーでありながら社長であり続けるためには&lt;/h2&gt;

&lt;p&gt;少しずつでも理想をつくり続けること、楽しむこと、チャレンジし続けること、人を好きでいること、選択を迫られたらどちらもやる方法を考え続けること。そんなところでしょうか。シンプルでいきましょう。&lt;/p&gt;

&lt;p&gt;整理したところで、一つ朗報を。&lt;/p&gt;

&lt;p&gt;社長業とプログラマーが共通することもあります。&lt;/p&gt;

&lt;p&gt;それは、仕組みづくりです。日常のタスクから組織づくりまで、社長業には仕組みづくりがつきものです。プログラマーにとっては、仕組みづくりこそがプログラミングの本質です。だから、プログラミングを社長業をやっていると、とても便利な解決策を模索することが可能です。また、社長業がたとえ作業的になりがちなときにも、新しい技術が、新しいアイディアの材料になり、多方面に想像力が働きます。もし、双方が両立できるような人間になれたのなら、それはいまだかつてないとても便利なものを生み出せるに違いありません。&lt;/p&gt;

&lt;p&gt;ボクはいつまでもプログラマーであることを自覚して生きていくつもりです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>