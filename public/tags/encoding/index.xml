<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Encoding on Atsushi Mori&#39;s blog</title>
    <link>http://jp.atsushimori.com/tags/encoding/</link>
    <description>Recent content in Encoding on Atsushi Mori&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 18 Dec 2016 01:41:28 +0900</lastBuildDate>
    <atom:link href="http://jp.atsushimori.com/tags/encoding/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.jsのFile Systemで画像を扱うときの出力方法</title>
      <link>http://jp.atsushimori.com/image-encoding-intro/</link>
      <pubDate>Sun, 18 Dec 2016 01:41:28 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/image-encoding-intro/</guid>
      <description>

&lt;p&gt;Electronを使っていると、けっこう使うFile Systemモジュールですが、画像を扱う際にバイナリとかバッファとかBase64などのエンコーディングでてきますよね？エンコードまわりと基本的なfsモジュールの出力操作について触れたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;バイナリとは&#34;&gt;バイナリとは&lt;/h2&gt;

&lt;p&gt;2進法で表現したデータのことです。2進法とは数字の0と1をつかって数を表す方法です。「デジタルは0と1でできている」とどこの誰かが言ったりしますが、機械は2進法でプログラムを読み取ります。なぜ2進法かというと、単純に計算がし易いからではないかと思います。&lt;/p&gt;

&lt;p&gt;日常的にボクたちが使っているのは0~9の10個の数字で表す10進法ですが、コンピュータにとっては理解するのがすこし遠い言語になってしまうわけです。0と1の組み合わせは◯（マル）か☓（バツ）かみたいな判断をしていくことと同じなので、シンプルですね。&lt;/p&gt;

&lt;p&gt;つまり、画像データでバイナリということは、色やピクセルの配置、その他画像に含まれる情報がすべて0と1で表現されたデータということです。アプリケーションなんかを作る場合、操作性を意識しますから、バイナリデータを変数に格納して入出力したりすることで、処理が早くなるというメリットがあります。&lt;/p&gt;

&lt;p&gt;ただ、注意しなくてはならないのは、ブラウザなどのフロント側ではバイナリデータを直接読み込んで表示するわけではないので、バイナリデータを処理で使用する場合は、jpgやpngなどに変換する作業を挟まないといけません。まぁ小さい画像くらいならいいのですが、大きいサイズの画像や動画とかになったら処理が重たくなりがちなので通信するデータサイズを縮小し、CPUやGPUなどの負荷を小さくするためにバイナリデータをうまく使っていくといいみたいです。&lt;/p&gt;

&lt;h2 id=&#34;バッファとは&#34;&gt;バッファとは&lt;/h2&gt;

&lt;p&gt;バッファとは、入出力処理において、プログラム処理中のタイムラグを補う目的で実装されたデータを一時的に保存する記憶領域のことを指します。英語では「緩衝記憶装置」「緩衝物」を意味する単語みたいです。&lt;/p&gt;

&lt;p&gt;イメージしやすいと思いますが、一時ファイルを扱うので、データを気軽に扱うことができます。あまりに大きなデータを扱うには向きませんが、さらっと「ちょっとこれ持ってて！」くらいのデータだったら柄どころが結構あるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;Vimをやっている人ならバッファの概念はお手の物だと思いますが、たとえば、音楽の録音ソフトとかで「バッファサイズが足りません」とかってでる、あれもバッファですね。要するにそうしたエラーがでるのは、「両手塞がってるからもう無理！」という状態のことですね。扱うデータ量の最大値を想像して設計しないとああした自体に陥ります。&lt;/p&gt;

&lt;p&gt;手軽なデータに使いましょう。&lt;/p&gt;

&lt;h2 id=&#34;base64とは&#34;&gt;Base64とは&lt;/h2&gt;

&lt;p&gt;バイナリデータを「A-Z,a-z,0-9,+,/」の64文字で表現するエンコード規格とのことです。64進数ということですね。◯進数とは「◯文字でデータを表現するのか」ということに近いと思うので、ざっくり覚えたいかたはそう覚えておきましょう。&lt;/p&gt;

&lt;p&gt;さて、バイナリデータが軽やかであるという話がでたのに、なぜあわざわざBase64のデータを使うシチュエーションが生まれるのでしょうか？&lt;/p&gt;

&lt;p&gt;答えをさきに言うと、ボクたちが日々使うメールのために作られた規格のようです。メール送信でSMTPって聞いたことありますかね？これは送信メールの通信規格なんですけど、当時このSMTPではASCIIデータという7Byteで表現される英数字しか送れなかったようです。日本語とかを扱うためにゴニョゴニョ最適化でもしたのでしょうか。それで、画像や音声のデータをこれじゃ送れないってことで、Base64というデータ変換方式が作られたとさ。&lt;/p&gt;

&lt;p&gt;プログラミングにおいては、正規表現などをつかってデータをフィルタリングしたりするのに一貫性のあるデータの方が使いやすいって理由でBase64が使わたり、画像データとしてブラウザでも表示できるので、そのような用途がある場合に使用されたりしています。&lt;/p&gt;

&lt;p&gt;パフォーマンスというよりはデータの整形や表示が楽というメリットがあります。&lt;/p&gt;

&lt;h2 id=&#34;それらを踏まえていざwritefile&#34;&gt;それらを踏まえていざwriteFile&lt;/h2&gt;

&lt;p&gt;ここまでは前置きでしたが、本題はそう長くありません。扱うデータをいづれかにするというだけなので、はっきりいって結論だけなら10行で終わりでした。前置きを伸ばしたお陰で記事っぽくなってよかったです。&lt;/p&gt;

&lt;p&gt;書き方はこうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fs = require(&#39;fs&#39;);
fs.writeFile(public, data, {encoding: &#39;指定&#39;}, function(err){
    // Any Code
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定部分には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;li&gt;buffer&lt;/li&gt;
&lt;li&gt;base64&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とかがはいったりしますね。&lt;/p&gt;

&lt;p&gt;あとは適当に試行錯誤してみると良いと思います。&lt;/p&gt;

&lt;p&gt;では。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>