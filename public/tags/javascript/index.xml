<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Atsushi Mori&#39;s blog</title>
    <link>http://jp.atsushimori.com/tags/javascript/</link>
    <description>Recent content in Javascript on Atsushi Mori&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 18 Dec 2016 01:41:28 +0900</lastBuildDate>
    <atom:link href="http://jp.atsushimori.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.jsのFile Systemで画像を扱うときの出力方法</title>
      <link>http://jp.atsushimori.com/image-encoding-intro/</link>
      <pubDate>Sun, 18 Dec 2016 01:41:28 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/image-encoding-intro/</guid>
      <description>

&lt;p&gt;Electronを使っていると、けっこう使うFile Systemモジュールですが、画像を扱う際にバイナリとかバッファとかBase64などのエンコーディングでてきますよね？エンコードまわりと基本的なfsモジュールの出力操作について触れたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;バイナリとは&#34;&gt;バイナリとは&lt;/h2&gt;

&lt;p&gt;2進法で表現したデータのことです。2進法とは数字の0と1をつかって数を表す方法です。「デジタルは0と1でできている」とどこの誰かが言ったりしますが、機械は2進法でプログラムを読み取ります。なぜ2進法かというと、単純に計算がし易いからではないかと思います。&lt;/p&gt;

&lt;p&gt;日常的にボクたちが使っているのは0~9の10個の数字で表す10進法ですが、コンピュータにとっては理解するのがすこし遠い言語になってしまうわけです。0と1の組み合わせは◯（マル）か☓（バツ）かみたいな判断をしていくことと同じなので、シンプルですね。&lt;/p&gt;

&lt;p&gt;つまり、画像データでバイナリということは、色やピクセルの配置、その他画像に含まれる情報がすべて0と1で表現されたデータということです。アプリケーションなんかを作る場合、操作性を意識しますから、バイナリデータを変数に格納して入出力したりすることで、処理が早くなるというメリットがあります。&lt;/p&gt;

&lt;p&gt;ただ、注意しなくてはならないのは、ブラウザなどのフロント側ではバイナリデータを直接読み込んで表示するわけではないので、バイナリデータを処理で使用する場合は、jpgやpngなどに変換する作業を挟まないといけません。まぁ小さい画像くらいならいいのですが、大きいサイズの画像や動画とかになったら処理が重たくなりがちなので通信するデータサイズを縮小し、CPUやGPUなどの負荷を小さくするためにバイナリデータをうまく使っていくといいみたいです。&lt;/p&gt;

&lt;h2 id=&#34;バッファとは&#34;&gt;バッファとは&lt;/h2&gt;

&lt;p&gt;バッファとは、入出力処理において、プログラム処理中のタイムラグを補う目的で実装されたデータを一時的に保存する記憶領域のことを指します。英語では「緩衝記憶装置」「緩衝物」を意味する単語みたいです。&lt;/p&gt;

&lt;p&gt;イメージしやすいと思いますが、一時ファイルを扱うので、データを気軽に扱うことができます。あまりに大きなデータを扱うには向きませんが、さらっと「ちょっとこれ持ってて！」くらいのデータだったら柄どころが結構あるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;Vimをやっている人ならバッファの概念はお手の物だと思いますが、たとえば、音楽の録音ソフトとかで「バッファサイズが足りません」とかってでる、あれもバッファですね。要するにそうしたエラーがでるのは、「両手塞がってるからもう無理！」という状態のことですね。扱うデータ量の最大値を想像して設計しないとああした自体に陥ります。&lt;/p&gt;

&lt;p&gt;手軽なデータに使いましょう。&lt;/p&gt;

&lt;h2 id=&#34;base64とは&#34;&gt;Base64とは&lt;/h2&gt;

&lt;p&gt;バイナリデータを「A-Z,a-z,0-9,+,/」の64文字で表現するエンコード規格とのことです。64進数ということですね。◯進数とは「◯文字でデータを表現するのか」ということに近いと思うので、ざっくり覚えたいかたはそう覚えておきましょう。&lt;/p&gt;

&lt;p&gt;さて、バイナリデータが軽やかであるという話がでたのに、なぜあわざわざBase64のデータを使うシチュエーションが生まれるのでしょうか？&lt;/p&gt;

&lt;p&gt;答えをさきに言うと、ボクたちが日々使うメールのために作られた規格のようです。メール送信でSMTPって聞いたことありますかね？これは送信メールの通信規格なんですけど、当時このSMTPではASCIIデータという7Byteで表現される英数字しか送れなかったようです。日本語とかを扱うためにゴニョゴニョ最適化でもしたのでしょうか。それで、画像や音声のデータをこれじゃ送れないってことで、Base64というデータ変換方式が作られたとさ。&lt;/p&gt;

&lt;p&gt;プログラミングにおいては、正規表現などをつかってデータをフィルタリングしたりするのに一貫性のあるデータの方が使いやすいって理由でBase64が使わたり、画像データとしてブラウザでも表示できるので、そのような用途がある場合に使用されたりしています。&lt;/p&gt;

&lt;p&gt;パフォーマンスというよりはデータの整形や表示が楽というメリットがあります。&lt;/p&gt;

&lt;h2 id=&#34;それらを踏まえていざwritefile&#34;&gt;それらを踏まえていざwriteFile&lt;/h2&gt;

&lt;p&gt;ここまでは前置きでしたが、本題はそう長くありません。扱うデータをいづれかにするというだけなので、はっきりいって結論だけなら10行で終わりでした。前置きを伸ばしたお陰で記事っぽくなってよかったです。&lt;/p&gt;

&lt;p&gt;書き方はこうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fs = require(&#39;fs&#39;);
fs.writeFile(public, data, {encoding: &#39;指定&#39;}, function(err){
    // Any Code
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定部分には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;li&gt;buffer&lt;/li&gt;
&lt;li&gt;base64&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とかがはいったりしますね。&lt;/p&gt;

&lt;p&gt;あとは適当に試行錯誤してみると良いと思います。&lt;/p&gt;

&lt;p&gt;では。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascriptの配列と連想配列</title>
      <link>http://jp.atsushimori.com/array-and-associative-array/</link>
      <pubDate>Tue, 13 Dec 2016 04:51:28 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/array-and-associative-array/</guid>
      <description>

&lt;p&gt;Javascriptをいじりだして、JSONの値を持ってくる時に連想配列のネストでいいんだっけ？配列にしたほうがいいんだっけ？と迷いながら、配列と連想配列の扱いについて方針を決めました。&lt;/p&gt;

&lt;h2 id=&#34;配列と連想配列の使い分け&#34;&gt;配列と連想配列の使い分け&lt;/h2&gt;

&lt;h3 id=&#34;配列を使う場合&#34;&gt;配列を使う場合&lt;/h3&gt;

&lt;p&gt;基本的にforとかで回すときは配列を使ったほうがいい。.lengthでとれるので。具体的には例えば、ブログ機能みたいなのをつくっているとして、ブログの記事の管理とか、各記事のカテゴリー情報とかタグ情報、こういった類のものは配列にいれてしまったほうが取り出しやすい。自分で設計できる場合という前提になりますが・・・。&lt;/p&gt;

&lt;p&gt;これはJSONファイル側です。Javascript側のオブジェクトで扱う場合は適宜調整が必要になることもあると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;title&amp;quot; : &amp;quot;title&amp;quot;,
    &amp;quot;categories&amp;quot; : [&amp;quot;cat1&amp;quot;,&amp;quot;cat2&amp;quot;],
    &amp;quot;tags&amp;quot; : [&amp;quot;tag1&amp;quot;,&amp;quot;tag2&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;連想配列の中の配列と言ったほうがいいのでしょうか。&lt;/p&gt;

&lt;h3 id=&#34;連想配列を使う場合&#34;&gt;連想配列を使う場合&lt;/h3&gt;

&lt;p&gt;大枠の構造をつくる場合に使う、というかJSONの構造自体が連想配列ということになるのでしょうか。なので、連想配列が基本にあって、その中のどこに配列を使えばいいかという話でしょうかね。基本的にフラットに格納できるのが一番シンプルで取り出しやすいので、データの設計で分業する形をとるっていうのも手ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;sitename&amp;quot; : &amp;quot;title&amp;quot;,
    &amp;quot;url&amp;quot; : &amp;quot;http://hoge.com&amp;quot;,
    &amp;quot;discription&amp;quot; : &amp;quot;hogehoge.&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jsonから特定の値を取り出す&#34;&gt;JSONから特定の値を取り出す&lt;/h2&gt;

&lt;p&gt;Node.jsベースのアプリケーションであれば、fsモジュールのreadFileなどでJSONを読みこんでそれをオブジェクトに変換して使ってあげればJavascript側でいろいろと値をいじることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fs = require(&#39;fs&#39;);
var path = &#39;dir/dir/data.json&#39;;
var loadFile = JSON.parse(fs.readFileSync(path, &#39;utf8&#39;));

console.log(loadFile.Key); // Keyはtitleとかsitenameとかの値です。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;配列の要素数を取り出す&#34;&gt;配列の要素数を取り出す&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;console.log(laodFile.categories.length);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.lengthで配列の個数が返ってきますので、これでfor文の範囲に指定したりすればループできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (i = 0; i &amp;lt; loadFile.categories.length; i++) {
    console.log(loadFile.categories);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavascriptってWebともともとマッチするし、Node.jsでバックエンド側含めてJavascriptで書くってことも多くなってきている印象ですね。&lt;/p&gt;

&lt;p&gt;以前はWordpressをちょこっといじるレベルのただのコーダーだったのですが、最近の革新の技術は本当に幅広く応用が可能で、プログラミングどっぷりつかって良かったなと最近思っています。&lt;/p&gt;

&lt;p&gt;MeteorかExpressも近々やってみようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フレームワークという魔法の言葉</title>
      <link>http://jp.atsushimori.com/no-framework/</link>
      <pubDate>Thu, 01 Dec 2016 15:05:47 +0900</pubDate>
      
      <guid>http://jp.atsushimori.com/no-framework/</guid>
      <description>

&lt;p&gt;プログラミングをやっていると、「フレームワーク」という言葉に幾度となく触れることとなります。Wordpressという単体の存在だった言葉も、いつしか「フレームワークはWordpressです」と「フレームワーク」という言葉の中に位置づけされるようになっていきます。WordpressにRuby on RailsにExpress・・・わたしたちはまるでフレームワークという建物の中を移動しながら生きているような錯覚に陥ります。もちろん、フレームワークが悪いわけではありません。開発効率はよくなるし、複数のプログラマー間でも共通の認識をもったままスムーズにプロジェクトを進めることができます。フレームワークに思想がくっつくのもこの「共通認識によるプロジェクトの一体感をつくる」ための仕組みの一つでしょう。&lt;/p&gt;

&lt;p&gt;結局、何が言いたいのか？&lt;/p&gt;

&lt;p&gt;フレームワークに依存しない方法を積極的に探っていくことがプログラマーとしてあるべき道なんじゃないかということを言いたいのです。フレームワークを使うべきではないということではなく、流行に乗っかったフレームワーク選定ではなく、正しいフレームワーク選びが必要だということです。逆にフレームワークを使わないということは、たとえばリアルタイム通信を実現したい時に、Websocketを一から組むしかない・・という結論になり、時間が無駄になりかねません。今ではSocket.ioなどもあるので、うまく使えば数十分で形にできますので、積極的に使わない手はありません。&lt;/p&gt;

&lt;h2 id=&#34;間違ったフレームワークの選び方&#34;&gt;間違ったフレームワークの選び方&lt;/h2&gt;

&lt;p&gt;主観なので、人によっては無視してほしいですが、ボクが考える間違ったフレームワークの選定プロセスは以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「言語＋フレームワーク」でググる&lt;/li&gt;
&lt;li&gt;その中で、盛り上がっているフレームワークを2-3ピックアップ&lt;/li&gt;
&lt;li&gt;やっぱり人気のあるフレームワークならドキュメントやコミュニティが整ってるし、一番Githubスターの付いているこれにしよう！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;晴れてあなたは新たなフレームワークの習得に励み、想定内の作業量と時間でプロジェクトを作り上げることができます。&lt;/p&gt;

&lt;h2 id=&#34;正しいフレームワークの選び方&#34;&gt;正しいフレームワークの選び方&lt;/h2&gt;

&lt;p&gt;それに対して、ボクが思う最適なフレームワークの選び方はこうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;まずは、プロジェクトの実現したい機能を整理する（要件定義）&lt;/li&gt;
&lt;li&gt;要件を小分けにする（リアルタイム通信ができる、保守しやすい、◯日でプロトタイプができる・・・という結構適当な分け方でOKだと思います。）&lt;/li&gt;
&lt;li&gt;小分けにした条件それぞれのシンプルな解決方法をググる&lt;/li&gt;
&lt;li&gt;それらを網羅するフレームワークを調べる&lt;/li&gt;
&lt;li&gt;小分け解決法とフレームワークを比較する（学習コスト、知識の永続性、開発時間、金銭コスト）&lt;/li&gt;
&lt;li&gt;最終的に使う方法を決定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;間違ったフレームワークとの違いは、課題を細分化するという点です。フルスタックのフレームワークであろうと、ミニマムなフレームワークでろうと、フレームワークという時点でやっぱりモリモリ機能が入っていますので、ミニマムという言葉に騙されてはいけません。場合によっては階層を落としたフレームワーク（たとえば、node.jsのフレームワークとあるけど、希望している機能はnode.jsの機能で代用可能？といった問いをかけることです。）を利用することで解決することが可能です。それを先に調べておけば、ExpressにMeteorにとそれぞれのフレームワークを覚えなくとも、機能を実現できるのではないでしょうか。（node.jsは割りとコアフレームワークかと思いますので、他の課題解決に転用しやすいこともポイント）&lt;/p&gt;

&lt;h2 id=&#34;便利-便利-不便&#34;&gt;便利 + 便利 = 不便&lt;/h2&gt;

&lt;p&gt;そもそもフレームワークは誰か個人の思想から発生するものです。それが競争していくことで、その市場が活発になるという見方もできますが、誰かがつくった便利な仕組みを更に便利に使用と進化を続けていくと、一番最初の機能になっている言語本来の機能が隠されて発展していきます。もともとは1行で書けたスクリプトも、フレームワークを機能させるために数十行になっていることだってあると思います。また、フレームワークはある種の一家みたいなもので、同じ屋根の下であれば心地よいのですが、一度海原に出ようものなら何をそんな冗長な書き方をしているんだ！と一喝されることだってあるのではないでしょうか。もし、そのフレームワークがこの先ずっと使えるというのならフレームワークが言語の代わりとなればよいのですが、残念ながらフレームワークはコロコロかわります。それは先述の通り、市場が活発になる、つまり競争が生まれるからなのです。フレームワークを乗り換えることはなかなか労力がいります。とりあえず触れてみる程度ならまったく躊躇せず使えると思いますが、製品レベルで作ろうというときはきっと深い機能までの理解が必要になるでしょう。その結果、テクノロジーの進化の恩恵をしばらく横目で見ることになるのです。&lt;/p&gt;

&lt;p&gt;Wordpressが良い例です。シンプルなフロント開発でWordpress以前というのはHTMLで直書きしていたり、独自CMSを開発するという流れが多かったはずです。こんなに便利なものはなかった！というインパクトと共にWordpressはヒットしたオープンソースとなりましたが、それから積極的により良い方法を模索したプログラマーがどれだけいるでしょうか？プラットフォームとしてWordpressは良いし、UIなどもなんだかんだで使いやすい。ぼーっとしていたら変えるメリットよりも変えるデメリットの方に焦点があたりがちです。しかし、今Webというプラットフォームの可能性は広がってきています。node.jsは一種切り開いた感があるなと個人的に感じています。そうしたテクノロジーの原理をしることで、すでにWordpressよりも良い選択肢というのは存在しているのに、みんなWordpressを使い続けています。せいぜいプラグインを入れてAMPに対応するという進歩にとどまっています。&lt;/p&gt;

&lt;p&gt;少し話は変わりますが、大規模になればなるほど、フレームワークはその真価を発揮すると思います。そもそも開発が数十名単位になれば、共通認識をもたせにくくなるということもありますし、個々のコードの違いがいわゆる「負の遺産」を産むことだってあります。プログラマーのレベルに幅があることも要因のひとつですね。そんなときはフレームワークを使ったほうが良いケースも往々にしてあると思います。必然的にそれなりの大企業になるでしょう。そうした企業では正しいフレームワークが広がり、力技が可能な大企業がその力を利用して個人に向けてそうした情報を発信する。その結果、ある種のフレームワークランキングが生成され、それに従ってフレームワーカーが増える。そんな構図が目に浮かびますが、みんながみんなフレームワークが必要な規模のプロジェクトを抱えているかというと実際はそうではないと思うのです。&lt;/p&gt;

&lt;p&gt;ましてや、個人レベルであれば、工夫次第で工程をミニマム化できることが多いと思うのです。でも、「フレームワーク」というのはそもそも便利に何かを作るための仕組みという固定概念が多くの人の中にあるので、疑わなくなります。結果的に実は不便になっているケースに気づきづらいのです。&lt;/p&gt;

&lt;h2 id=&#34;フレームワークは洋服&#34;&gt;フレームワークは洋服&lt;/h2&gt;

&lt;p&gt;フレームワークというのはそのトレンド感などもまとうという点で、洋服に似ています。流行りを重視する人もいれば、機能性を重視することもできる。ただ、トレンドの服装を着こなせなければダサくなるということです。ファッションのうまいひとは、トレンドを取り入れつつも普遍的な哲学やテクニックを持ち合わせています。鍛えた身体でサラッとTシャツをかっこよく着こなすみたいなことをプログラミングに置き換えてやっていきたいというのがボクの方針です。外国人はオシャレレベルが高そう、外国人はプログラミングレベルが高そうという魔法もファッションとプログラミングでなんか似ていますね。&lt;/p&gt;

&lt;p&gt;まとめます。&lt;/p&gt;

&lt;p&gt;フレームワークの前に言語レベルでの実装について興味をもってみましょう。そうするとフレームワークの便利さや本質的なネックなどがわかるようになるという利点があります。自分自身がフレームワークに手を出しまくっていて、ずっと「なんかなー、これでいいのかなー」という疑問を持っていたのですが、最近このような考えにまとまったので記事にしてみました。&lt;/p&gt;

&lt;p&gt;では。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>